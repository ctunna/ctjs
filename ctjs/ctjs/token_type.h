#pragma once

#include <string>

namespace ctjs::ast {
enum class TokenType {
  Ampersand,
  AmpersandEquals,
  Arrow,
  Asterisk,
  AsteriskEquals,
  Async,
  Await,
  BigIntLiteral,
  BoolLiteral,
  BracketClose,
  BracketOpen,
  Break,
  Caret,
  CaretEquals,
  Case,
  Catch,
  Class,
  Colon,
  Comma,
  Const,
  Continue,
  CurlyClose,
  CurlyOpen,
  Debugger,
  Default,
  Delete,
  Do,
  DoubleAmpersand,
  DoubleAmpersandEquals,
  DoubleAsterisk,
  DoubleAsteriskEquals,
  DoublePipe,
  DoublePipeEquals,
  DoubleQuestionMark,
  DoubleQuestionMarkEquals,
  Else,
  Enum,
  Eof,
  Equals,
  EqualsEquals,
  EqualsEqualsEquals,
  EscapedKeyword,
  ExclamationMark,
  ExclamationMarkEquals,
  ExclamationMarkEqualsEquals,
  Export,
  Extends,
  Finally,
  For,
  Function,
  GreaterThan,
  GreaterThanEquals,
  Identifier,
  If,
  Implements,
  Import,
  In,
  Instanceof,
  Interface,
  Invalid,
  LessThan,
  LessThanEquals,
  Let,
  Minus,
  MinusEquals,
  MinusMinus,
  New,
  NullLiteral,
  NumericLiteral,
  Package,
  ParenClose,
  ParenOpen,
  Percent,
  PercentEquals,
  Period,
  Pipe,
  PipeEquals,
  Plus,
  PlusEquals,
  PlusPlus,
  Private,
  PrivateIdentifier,
  Protected,
  Public,
  QuestionMark,
  QuestionMarkPeriod,
  RegexFlags,
  RegexLiteral,
  Return,
  Semicolon,
  ShiftLeft,
  ShiftLeftEquals,
  ShiftRight,
  ShiftRightEquals,
  Slash,
  SlashEquals,
  Static,
  StringLiteral,
  Super,
  Switch,
  TemplateLiteralEnd,
  TemplateLiteralExprEnd,
  TemplateLiteralExprStart,
  TemplateLiteralStart,
  TemplateLiteralString,
  This,
  Throw,
  Tilde,
  TripleDot,
  Try,
  Typeof,
  UnsignedShiftRight,
  UnsignedShiftRightEquals,
  UnterminatedRegexLiteral,
  UnterminatedStringLiteral,
  UnterminatedTemplateLiteral,
  Var,
  Void,
  While,
  With,
  Yield,
};

inline std::string to_string(TokenType type) {
  const char *const names[]{"Ampersand",
                            "AmpersandEquals",
                            "Arrow",
                            "Asterisk",
                            "AsteriskEquals",
                            "Async",
                            "Await",
                            "BigIntLiteral",
                            "BoolLiteral",
                            "BracketClose",
                            "BracketOpen",
                            "Break",
                            "Caret",
                            "CaretEquals",
                            "Case",
                            "Catch",
                            "Class",
                            "Colon",
                            "Comma",
                            "Const",
                            "Continue",
                            "CurlyClose",
                            "CurlyOpen",
                            "Debugger",
                            "Default",
                            "Delete",
                            "Do",
                            "DoubleAmpersand",
                            "DoubleAmpersandEquals",
                            "DoubleAsterisk",
                            "DoubleAsteriskEquals",
                            "DoublePipe",
                            "DoublePipeEquals",
                            "DoubleQuestionMark",
                            "DoubleQuestionMarkEquals",
                            "Else",
                            "Enum",
                            "Eof",
                            "Equals",
                            "EqualsEquals",
                            "EqualsEqualsEquals",
                            "EscapedKeyword",
                            "ExclamationMark",
                            "ExclamationMarkEquals",
                            "ExclamationMarkEqualsEquals",
                            "Export",
                            "Extends",
                            "Finally",
                            "For",
                            "Function",
                            "GreaterThan",
                            "GreaterThanEquals",
                            "Identifier",
                            "If",
                            "Implements",
                            "Import",
                            "In",
                            "Instanceof",
                            "Interface",
                            "Invalid",
                            "LessThan",
                            "LessThanEquals",
                            "Let",
                            "Minus",
                            "MinusEquals",
                            "MinusMinus",
                            "New",
                            "NullLiteral",
                            "NumericLiteral",
                            "Package",
                            "ParenClose",
                            "ParenOpen",
                            "Percent",
                            "PercentEquals",
                            "Period",
                            "Pipe",
                            "PipeEquals",
                            "Plus",
                            "PlusEquals",
                            "PlusPlus",
                            "Private",
                            "PrivateIdentifier",
                            "Protected",
                            "Public",
                            "QuestionMark",
                            "QuestionMarkPeriod",
                            "RegexFlags",
                            "RegexLiteral",
                            "Return",
                            "Semicolon",
                            "ShiftLeft",
                            "ShiftLeftEquals",
                            "ShiftRight",
                            "ShiftRightEquals",
                            "Slash",
                            "SlashEquals",
                            "Static",
                            "StringLiteral",
                            "Super",
                            "Switch",
                            "TemplateLiteralEnd",
                            "TemplateLiteralExprEnd",
                            "TemplateLiteralExprStart",
                            "TemplateLiteralStart",
                            "TemplateLiteralString",
                            "This",
                            "Throw",
                            "Tilde",
                            "TripleDot",
                            "Try",
                            "Typeof",
                            "UnsignedShiftRight",
                            "UnsignedShiftRightEquals",
                            "UnterminatedRegexLiteral",
                            "UnterminatedStringLiteral",
                            "UnterminatedTemplateLiteral",
                            "Var",
                            "Void",
                            "While",
                            "With",
                            "Yield"};
  auto index{static_cast<int>(type)};
  if (index < 0 || index >= static_cast<int>(TokenType::Yield)) {
    return "Invalid";
  }
  return names[static_cast<int>(type)];
}
}  // namespace ctjs::ast
